% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pec-eha-aftreg.R
\name{pec2}
\alias{pec2}
\title{Clone of pec::pec function}
\usage{
pec2(
  object,
  formula,
  data,
  traindata,
  times,
  cause,
  start,
  maxtime,
  exact = TRUE,
  exactness = 100,
  fillChar = NA,
  cens.model = "cox",
  ipcw.refit = FALSE,
  ipcw.args = NULL,
  splitMethod = "none",
  B,
  M,
  reference = TRUE,
  model.args = NULL,
  model.parms = NULL,
  keep.index = FALSE,
  keep.matrix = FALSE,
  keep.models = FALSE,
  keep.residuals = FALSE,
  keep.pvalues = FALSE,
  noinf.permute = FALSE,
  multiSplitTest = FALSE,
  testIBS,
  testTimes,
  confInt = FALSE,
  confLevel = 0.95,
  verbose = TRUE,
  savePath = NULL,
  slaveseed = NULL,
  na.action = na.fail,
  ...
)
}
\arguments{
\item{object}{A named list of prediction models, where allowed entries are
(1) R-objects for which a \link[pec]{predictSurvProb} method exists (see
details), (2) a \code{call} that evaluates to such an R-object (see
examples), (3) a matrix with predicted probabilities having as many rows as
\code{data} and as many columns as \code{times}. For cross-validation all
objects in this list must include their \code{call}.}

\item{formula}{A survival formula as obtained either
with \code{prodlim::Hist} or \code{survival::Surv}.
The left hand side is used to find the status response variable in \code{data}. For right censored data, the right
hand side of the formula is used to specify conditional censoring models.
For example, set \code{Surv(time,status)~x1+x2} and \code{cens.model="cox"}.
Then the weights are based on a Cox regression model for the censoring times
with predictors x1 and x2.  Note that the usual coding is assumed:
\code{status=0} for censored times and that each variable name that appears
in \code{formula} must be the column name in \code{data}. If there are no
covariates, i.e. \code{formula=Surv(time,status)~1} the \code{cens.model} is
coerced to \code{"marginal"} and the Kaplan-Meier estimator for the
censoring times is used to calculate the weights.  If \code{formula} is
\code{missing}, try to extract a formula from the first element in object.}

\item{data}{A data frame in which to validate the prediction models and to
fit the censoring model.  If \code{data} is missing, try to extract a data
set from the first element in object.}

\item{traindata}{A data frame in which the models are trained. This argument
is used only in the absence of crossvalidation, in which case it is
passed to the predictHandler function predictSurvProb}

\item{times}{A vector of time points. At each time point the prediction
error curves are estimated. If \code{exact==TRUE} the \code{times} are
merged with all the unique values of the response variable.  If \code{times}
is missing and \code{exact==TRUE} all the unique values of the response
variable are used.  If missing and \code{exact==FALSE} use a equidistant
grid of values between \code{start} and \code{maxtime}.  The distance is
determined by \code{exactness}.}

\item{cause}{For competing risks, the event of interest. Defaults to the
first state of the response, which is obtained by evaluating the left hand
side of \code{formula} in \code{data}.}

\item{start}{Minimal time for estimating the prediction error curves.  If
missing and \code{formula} defines a \code{Surv} or \code{Hist} object then
\code{start} defaults to \code{0}, otherwise to the smallest observed value
of the response variable. \code{start} is ignored if \code{times} are given.}

\item{maxtime}{Maximal time for estimating the prediction error curves. If
missing the largest value of the response variable is used.}

\item{exact}{Logical. If \code{TRUE} estimate the prediction error curves at
all the unique values of the response variable. If \code{times} are given
and \code{exact=TRUE} then the \code{times} are merged with the unique
values of the response variable.}

\item{exactness}{An integer that determines how many equidistant gridpoints
are used between \code{start} and \code{maxtime}.  The default is 100.}

\item{fillChar}{Symbol used to fill-in places where the values of the
prediction error curves are not available. The default is \code{NA}.}

\item{cens.model}{Method for estimating inverse probability of censoring
weigths:

\code{cox}: A semi-parametric Cox proportional hazard model is fitted to the
censoring times

\code{marginal}: The Kaplan-Meier estimator for the censoring times

\code{nonpar}: Nonparametric extension of the Kaplan-Meier for the censoring
times using symmetric nearest neighborhoods -- available for arbitrary many
strata variables on the right hand side of argument \code{formula} but at
most one continuous variable. See the documentation of the functions
\code{prodlim} and \code{neighborhood} from the prodlim package.

\code{aalen}: The nonparametric Aalen additive model fitted to the censoring
times. Requires the \code{timereg} package.}

\item{ipcw.refit}{If \code{TRUE} the inverse probability of censoring
weigths are estimated separately in each training set during
cross-validation.}

\item{ipcw.args}{List of arguments passed to function specified by argument \code{cens.model}.}

\item{splitMethod}{SplitMethod for estimating the prediction error curves.

\code{none/noPlan}: Assess the models in the same data where they are
fitted.  \code{boot}: DEPRECIATED.

\code{cvK}: K-fold cross-validation, i.e. \code{cv10} for 10-fold
cross-validation.  After splitting the data in K subsets, the prediction
models (ie those specified in \code{object}) are evaluated on the data
omitting the Kth subset (training step). The prediction error is estimated
with the Kth subset (validation step).

The random splitting is repeated \code{B} times and the estimated prediction
error curves are obtained by averaging.

\code{BootCv}: Bootstrap cross validation. The prediction models are trained
on \code{B} bootstrap samples, that are either drawn with replacement of the
same size as the original data or without replacement from \code{data} of
the size \code{M}.  The models are assessed in the observations that are NOT
in the bootstrap sample.

\code{Boot632}: Linear combination of AppErr and BootCvErr using the
constant weight .632.

\code{Boot632plus}: Linear combination of AppErr and BootCv using weights
dependent on how the models perform in permuted data.

\code{loocv}: Leave one out cross-validation.

\code{NoInf}: Assess the models in permuted data.}

\item{B}{Number of bootstrap samples. The default depends on argument
\code{splitMethod}.  When \code{splitMethod} in
c("BootCv","Boot632","Boot632plus") the default is 100. For
\code{splitMethod="cvK"} \code{B} is the number of cross-validation cycles,
and -- default is 1.  For \code{splitMethod="none"} \code{B} is the number
of bootstrap simulations e.g. to obtain bootstrap confidence limits --
default is 0.}

\item{M}{The size of the bootstrap samples for resampling without
replacement. Ignored for resampling with replacement.}

\item{reference}{Logical. If \code{TRUE} add the marginal Kaplan-Meier
prediction model as a reference to the list of models.}

\item{model.args}{List of extra arguments that can be passed to the
\code{predictSurvProb} methods. The list must have an entry for each entry
in \code{object}.}

\item{model.parms}{Experimental.  List of with exactly one entry for each
entry in \code{object}.  Each entry names parts of the value of the fitted
models that should be extracted and added to the value.}

\item{keep.index}{Logical. If \code{FALSE} remove the bootstrap or
cross-validation index from the output list which otherwise is included in
the splitMethod part of the output list.}

\item{keep.matrix}{Logical. If \code{TRUE} add all \code{B} prediction error
curves from bootstrapping or cross-validation to the output.}

\item{keep.models}{Logical. If \code{TRUE} keep the models in object. Since
fitted models can be large objects the default is \code{FALSE}.}

\item{keep.residuals}{Logical. If \code{TRUE} keep the patient individual
residuals at \code{testTimes}.}

\item{keep.pvalues}{For \code{multiSplitTest}. If \code{TRUE} keep the
pvalues from the single splits.}

\item{noinf.permute}{If \code{TRUE} the noinformation error is approximated
using permutation.}

\item{multiSplitTest}{If \code{TRUE} the test proposed by van de Wiel et al.
(2009) is applied. Requires subsampling bootstrap cross-validation, i.e.
that \code{splitMethod} equals \code{bootcv} and that \code{M} is specified.}

\item{testIBS}{A range of time points for testing differences between models
in the integrated Brier scores.}

\item{testTimes}{A vector of time points for testing differences between
models in the time-point specific Brier scores.}

\item{confInt}{Experimental.}

\item{confLevel}{Experimental.}

\item{verbose}{if \code{TRUE} report details of the progress, e.g. count the
steps in cross-validation.}

\item{savePath}{Place in your file system (i.e., a directory on your
computer) where training models fitted during cross-validation are saved. If
\code{missing} training models are not saved.}

\item{slaveseed}{Vector of seeds, as long as \code{B}, to be given to the
slaves in parallel computing.}

\item{na.action}{Passed immediately to model.frame. Defaults to na.fail. If
set otherwise most prediction models will not work.}

\item{...}{Not used.}
}
\description{
Slightly modified such that start/stop formulas are accepted and processed.
}
\keyword{internal}
